#!/usr/bin/bash

# Author : Anand Kulkarni. 
# Date : 01/01/2020 : Started building the package mon utility to pull packages and deploy them as much as possible without any end user interaction and ease of use.
# Identify if there is root user who is running this.

function setupInitialConfig()
{

if [ "$1" = "release" ]; then
	export configFile="/etc/fcpkgmon.conf"
else
	export configFile="$PWD/fcpkgmon.debug.conf"
fi

if [ ! -f ${configFile} ]; then
	echo -e "Fatal Error : The ${configFile} is not found.Cant proceed without it.Check Installation was proper\n"
	echo -e "Exiting with error"
	exit 1
fi

while IFS= read -r line
do
  if [ ! "${line:0:1}" = "#" ]; then
    keyItem=$(echo $line|awk -F":" '{print $1}')
    valueItem=$(echo $line|awk -F":" '{print $2}')
    eval "export ${keyItem}=${valueItem}"
  fi
done <${configFile}
}

# The first step is we identify if we are in developer mode or installed/release mode. 
#This is required to identify the correct conf file to be loaded in setupInitialConfig script.

invokePath=$(dirname $0)
export runMode="debug"
if [ "${invokePath}" = "/usr/local/bin" ]; then
	runMode="release"
fi

# Invoke the critical config setup function.
echo -e "Running in ${runMode} mode.."
setupInitialConfig ${runMode}

# Import library functions here.Identify if it exists.If not simply exit with error.
if [ ! -f ${pkgMonLibPath}/${pkgMonLib} ]; then
	echo -e "Fatal Error : The library ${pkgMonLib} was not found at ${pkgMonLibPath} path.Exiting with failure..."
	exit 1
else
	. ${pkgMonLibPath}/${pkgMonLib}
fi 

# validate running user.
isRoot=$(isUserRoot)
if [ "$isRoot" = "no" ]; then
	echo -e "user is not root.This installation will not continue.To proceed package installation run fcpkgmon as root.Exiting with failure..."
	exit 1
else
	echo -e "user is verified as root.proceeding further.."
fi

# Validate the pkgmonList.txt exists. This is the master map of all installation tools and the approach to installing them.
# First we will get the current folder path as script may be run from either same place or invoked from another folder.

# Setup some folders specific to installer so that we can track package cache and the install logs.
mkdir -p ${pkgMonCache} ${pkgMonLog}

# Identify if there is layout file present in $monDir path. Else quit. We cant proceed until layout file is available.
if [ ! -f ${monDir}/${pkgList} ]; then
	echo -e "Failed to identify layout config file at path ${monDir}.Exiting with failure..."
	exit 1
fi

# Validate the file layout passed. If it does not have 5 specific columns seperated by pipe. Then simply quit with error.
# There will be unexpected issues/errors if the layout is not properly maintained.

isLayoutValid=$(cat ${monDir}/${pkgList}|awk -F"|" '{print NF}'|sort|uniq|wc -l)
if [ "$isLayoutValid" != "1" ]; then
	echo -e "The pkgmonList.txt is corrupt and it needs to be validated.All rows of the file must have five pipe seperated values. please verify."
	echo -e "Exiting with failure..."
	exit 1
fi

# Now the real validation of input arguments starts. We can pass an "all" switch. This simply installs all category by category.
# Otherwise we can install all [category name] or we can install all [category-name] [pipe seperated package names ].

if [ $# -eq 0 ]; then
	echo -e "Please refer to proper usage of the $0 script. Exiting with failure..."
	showUsage
	exit 1
fi

if [ $# -eq 1 -a "$1" != "all" ]; then
	echo -e "If single paramter is passed to script. It must be 'all' since all categories are to be installed.Exiting with failure..."
	showUsage
	exit 1
fi

if [ $# -eq 2 -a "$1" != "all" ]; then
	echo -e "If two paramters are passed. First must be all and second must be a valid installation category."
	showUsage
	exit 1
fi

if [ $# -eq 2 ]; then
	isValidCategory=$(isValidCategory $2)
	if [ "$isValidCategory" != "yes" ]; then
		echo -e "The category passed $2 is not valid. Please validate for case sensitivity and ensure it is one of the recommended categories.Exiting with failure.."
		showUsage
		exit 1
	fi
fi

if [ $# -eq 3 ]; then
	isValidCategory=$(isValidCategory $2)
	  if [ "$isValidCategory" != "yes" ]; then
		  echo -e "The category passed $2 is not valid. Please validate for case sensitivity and ensure it is one of the recommended categories.Exiting with failure.."
			showUsage
	    exit 1
		fi
	pkgNameList=$(echo $3|tr "|" " ")
fi

# Initialize the layout file as below to a default state. Modify as per switches.
export layOutFile="${pkgMonCache}/${layOutFileName}"; cat /dev/null > ${layOutFile}
export categoryName=$2

if [ "${pkgNameList}" != "" ]; then
	echo -e "Building a custom layout package from given package names at : ${layOutFile}"
	#head -1 ${monDir}/${pkgList} > ${layOutFile} # Adding the header for the custom layout file. This is not needed as it serves no purpose while attempting installation.
	for pkgItem in ${pkgNameList}
	do
		grep "${pkgItem}" ${monDir}/${pkgList} | grep -v ^$ | grep "|${2}|" >> ${layOutFile}
	done
else
	if [ "${categoryName}" = "" ]; then
		export layOutFile="${monDir}/${pkgList}"
	else
		grep "|${categoryName}|" ${monDir}/${pkgList} | grep -v ^$ >> ${layOutFile}
	fi
fi
if [ ! -s "${layOutFile}" ]; then
	echo -e "The resulting custom layout file is empty.This is because the items mentioned do not have a category or they are not in masterList."
	echo -e "Exiting with failure..."
	exit 1
fi 
# Assume at this stage that parameters passed are 2 only. Code this piece out working first. then consider optimal design of all cases including the third.
# Third case : $0 [all] [category] [specificPipeSeperatedPackageList]

while IFS= read -r line
do
	  pkgName=$(echo $line|awk -F'|' '{print $1}')
		autoSwitch=$(echo $line|awk -F'|' '{print $3}')
	  installType=$(echo $line|awk -F'|' '{print $4}')
		runDnfInstall $pkgName $autoSwitch $installType 
done < ${layOutFile}

# Run the cleanup before exit.
if [ "${exitCleanUp}" = "true" ]; then
	echo -e "running requested cleanup of the ${pkgMonCache} area.."
  find ${pkgMonCache} -type f | xargs rm -f  
  find ${pkgMonCache} -type d | xargs rm -rf  
  mkdir -p ${pkgMonCache}
fi

# Exit gracefully.
exit 0
